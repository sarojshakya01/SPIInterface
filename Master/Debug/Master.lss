
SPI Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ea  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000195  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000163  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ea  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmnd>:
#define LCD_RS 2
#define LCD_EN 3
//LCD Code starts from here//
void LCD_cmnd(unsigned char cmnd) //function to send command to LCD Module
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0); //send upper 4 bit
  6c:	9b b3       	in	r25, 0x1b	; 27
  6e:	28 2f       	mov	r18, r24
  70:	20 7f       	andi	r18, 0xF0	; 240
  72:	9f 70       	andi	r25, 0x0F	; 15
  74:	92 2b       	or	r25, r18
  76:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); //0b11111011 //RS = 0
  78:	da 98       	cbi	0x1b, 2	; 27
	//LCD_DATA_PORT &= ~(1<<LCD_RW); //0b11111011//RW = 0
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  7a:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	e7 ec       	ldi	r30, 0xC7	; 199
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <LCD_cmnd+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <LCD_cmnd+0x1a>
  86:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  88:	db 98       	cbi	0x1b, 3	; 27
  8a:	ef e1       	ldi	r30, 0x1F	; 31
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmnd+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmnd+0x28>
  94:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); //send lower 4 bit
  96:	2b b3       	in	r18, 0x1b	; 27
  98:	f0 e1       	ldi	r31, 0x10	; 16
  9a:	8f 9f       	mul	r24, r31
  9c:	c0 01       	movw	r24, r0
  9e:	11 24       	eor	r1, r1
  a0:	92 2f       	mov	r25, r18
  a2:	9f 70       	andi	r25, 0x0F	; 15
  a4:	89 2b       	or	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  a8:	db 9a       	sbi	0x1b, 3	; 27
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_cmnd+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_cmnd+0x48>
  b4:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  b6:	db 98       	cbi	0x1b, 3	; 27
  b8:	08 95       	ret

000000ba <LCD_data>:
}
void LCD_data(unsigned char data) //Function to send data to LCD Module
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	28 2f       	mov	r18, r24
  be:	20 7f       	andi	r18, 0xF0	; 240
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	92 2b       	or	r25, r18
  c4:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; //0b00000100 //RS = 1
  c6:	da 9a       	sbi	0x1b, 2	; 27
	//LCD_DATA_PORT &= ~(1<<LCD_RW); //0b11111011
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
  c8:	db 9a       	sbi	0x1b, 3	; 27
  ca:	e7 ec       	ldi	r30, 0xC7	; 199
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_data+0x14>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_data+0x1a>
  d4:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
  d6:	db 98       	cbi	0x1b, 3	; 27
  d8:	ef e3       	ldi	r30, 0x3F	; 63
  da:	ff e1       	ldi	r31, 0x1F	; 31
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_data+0x22>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_data+0x28>
  e2:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
  e4:	2b b3       	in	r18, 0x1b	; 27
  e6:	f0 e1       	ldi	r31, 0x10	; 16
  e8:	8f 9f       	mul	r24, r31
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	92 2f       	mov	r25, r18
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 2b       	or	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
  f6:	db 9a       	sbi	0x1b, 3	; 27
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9f e1       	ldi	r25, 0x1F	; 31
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_data+0x42>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_data+0x48>
 102:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 104:	db 98       	cbi	0x1b, 3	; 27
 106:	08 95       	ret

00000108 <LCD_initialize>:
}
void LCD_initialize(void) //Function to initialize LCD Module
{
	LCD_DATA_DDR = 0xFC;
 108:	8c ef       	ldi	r24, 0xFC	; 252
 10a:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111;
 10c:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	83 ec       	ldi	r24, 0xC3	; 195
 112:	99 e0       	ldi	r25, 0x09	; 9
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <LCD_initialize+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_initialize+0x16>
 11e:	00 00       	nop
	_delay_ms(200);
	LCD_cmnd(0x33);
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmnd>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <LCD_initialize+0x24>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_initialize+0x2e>
 136:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x32);
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmnd>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_initialize+0x3c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_initialize+0x46>
 14e:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmnd>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <LCD_initialize+0x54>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_initialize+0x5e>
 166:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0C);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmnd>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_initialize+0x6c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_initialize+0x76>
 17e:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmnd>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <LCD_initialize+0x84>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_initialize+0x8e>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <main>:
	LCD_data(num/10 + 0x30);
	LCD_data(num%10 + 0x30);
}
int main(void)
{
	LCD_initialize();
 19a:	0e 94 84 00 	call	0x108	; 0x108 <LCD_initialize>
	DDRB = (1<<MOSI) | (1<<SCK);
 19e:	80 ea       	ldi	r24, 0xA0	; 160
 1a0:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 1a2:	81 e5       	ldi	r24, 0x51	; 81
 1a4:	8d b9       	out	0x0d, r24	; 13
    while(1)
    {
		SPDR = 'A';
 1a6:	c1 e4       	ldi	r28, 0x41	; 65
 1a8:	cf b9       	out	0x0f, r28	; 15
		while (!(SPSR & (1<SPIF)));
 1aa:	70 9b       	sbis	0x0e, 0	; 14
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0x10>
		LCD_data(SPDR);
 1ae:	8f b1       	in	r24, 0x0f	; 15
 1b0:	0e 94 5d 00 	call	0xba	; 0xba <LCD_data>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	83 ec       	ldi	r24, 0xC3	; 195
 1b8:	99 e0       	ldi	r25, 0x09	; 9
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x20>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x2a>
 1c4:	00 00       	nop
 1c6:	f0 cf       	rjmp	.-32     	; 0x1a8 <main+0xe>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
